/*
Курс: Знакомство с языками программирования

Лекция от 30.01.2024
04
Урок 2
Массивы

Дата: 06.02.2024
*/


/*
Массив - структура данных, хранящая набор однотипных элементов, идентифицируемых по индексу.
Индекс элемента массива - смещение элемента относительно начала массива; позиция элемента в массиве.
    0 1 2 3 ...

 Характеристики массивов:
    * Массив имеет имя, используемое для обращения к его элементам.
    * Доступ к элементам осуществляется с помощью обращения по индексу (операция индексации []).
    * Элементы массива в памяти располагаются последовательно.
    * Массив имеет конечный размер.
*/


/*
Пример №1
    * Создать массив на 5 элементов
    * Заполнить его целыми числами
    * Вывести элементы на экран

Этапы решения:
    1. Указание типа данных
    2. Указание имени массива
    3. Выделение памяти под элементы
    4. Связывание выделенной памяти с именем массива
    
int[] arr = new int[5];
    где int[] - тип 
    arr - имя
    new int[5] - выделение памяти; 5 - количество ячеек массива, которые хотим выделить
    = - связывание пямяти с именем
*/

// int[] arr = new int[5];

// arr[0] = 5;
// arr[1] = 7;
// arr[2] = 5;
// arr[3] = 4;
// arr[4] = 3;

// System.Console.WriteLine((arr[0]));
// System.Console.WriteLine((arr[1]));
// System.Console.WriteLine((arr[2]));
// System.Console.WriteLine((arr[3]));
// System.Console.WriteLine((arr[4]));
// System.Console.WriteLine((arr[5])); // недопустимая ячейка, выход за границы массива


// int[] arr2 = new int[5] { 1, 2, 3, 4, 5 }; // сразу при создании можно прописать все элементы в {}
// int[] arr3 = { 1, 2, 3, 4, 5 }; // можно так. при создании небольших массивов


/*
Применение массивов:
    * хранение однотипных элементов
    * поиск элемента в наборе (макс/мин значения, поиск файла определенного типа)
    * вычисление каких-либо характеристик от набора элементов (сумма, среднее значение)
*/


/*
Задача №1
    Создать массив и заполнить его целыми числами от 1 до N (N – произвольное натуральное число).
    Вывести элементы массива на экран.

Пример 1
    N = 4
    1 2 3 4
Пример 2
    N = 6
    1 2 3 4 5 6

Этапы решения задачи
    1. Ввод N
    2. Создание массива
    3. Заполнение массива
    4. Вывод массива на экран
*/

// int N = 10;
// int[] arr = new int[N];
// int i = 0;

// while (i < N) // вместо N можно написать arr.Length - длина массива arr
// {
//     arr[i] = i + 1;
//     //System.Console.WriteLine(arr[i]);
//     //System.Console.WriteLine(' ');
//     System.Console.Write($"{arr[i]} ");
//     i = i + 1;
// }


/*
Задача №2
    Создать целочисленный массив на 10 элементов и заполнить его произвольными числами.
    Вывести на экран чётные элементы массива.

Пример 1
    Массив: [1 5 4 6 9 3 2 5 4 1]
    Чётные: 4 6 2 4

Пример 2
    Массив: [9 5 1 7 15 36 3 1 1 7]
    Чётные: 36

Этапы решения задачи
    1. Создание массива из 10 чисел
    2. Проход по элементам
    3. Проверка каждого элемента на чётность
    4. Вывод подходящего элемента
*/

// int[] array = { 2, 5, 4, 7, 8, 35, 1, 3, 8, 5 };
// int i = 0;

// while (i < array.Length)
// {
//     if (array[i] % 2 == 0)
//     {
//         Console.Write($"{array[i]} ");
//     }
//     i = i + 1;
// }


/*
Задача №3
    Дано N гирь с разным весом в случайном порядке.
    Определить вес самой тяжелой гири.
*/

// int n = 5;
// int[] array = { 2, 4, 7, 3, 9 };
// int i = 0;
// int max = array[0];

// while (i < n)
// {
//     if (array[i] > max)
//     {
//         max = array[i];
//     }
//     i = i + 1;
// }
// Console.Write(max);


/*
Цикл FOR:

    for (int i = 0; i < 10; i = i + 1)
    {
        <тело цикла>
    }

где int i = 0 - инициализация счётчика
i < 10 - условие цикла
i = i + 1 - модификация счётчика после выполнения итерации

Порядок выполнения цикла FOR:
    1. Инициализация
    2. Проверка условия
    3. Выполнение тела цикла (если условие верно)
    4. Модификация
    5. Возврат к п. 2

Рекомендации к применению цикла FOR:
    * проход по элементам массива
    * в задачах, где число итераций фиксировано

Рекомендации к применению цикла WHILE:
    * в задачах, где верхняя граница числа итераций неизвестна (например посимвольное чтение файла)
    while (true)
    {
        <тело цикла>
    }

Цикл FOREACH:

    int[] array = { 1, 2, 3, 4, 5 };
    foreach (int e in array)
    {
        <тело цикла>
    }

где int e - переменная цикла (при обращении к элементу массива очередной элемент копируется
в переменную цикла, изменения элемента массива недоступны)
array - массив


Решим задачу №3 при помощи цикла FOR:
*/

// int n = 5;
// int[] array = { 2, 4, 7, 3, 9 };
// int max = array[0];

// for (int j = 0; j < n; j++)
// {
//     if (array[j] > max)
//     {
//         max = array[j];
//     }
// }
// Console.Write(max);


/*
Решим задачу №3 при помощи цикла FOREACH:
*/

int[] array = { 2, 4, 7, 3, 9 };
int max = array[0];

foreach (int e in array)
{
    if (e > max)
    {
        max = e;
    }
}
Console.Write(max);

