/*
Курс: Знакомство с языками программирования

Лекция от 03.02.2024
06
Урок 3
Функции

Дата: 13.02.2024
*/


/*
Функция - это блок кода, решающий определенную задачу.

Ф. для своей работы могут требовать входные данные (параметры).
Ф. могут возвращать результат (возвращаемое значение).

Входные данные -> Ф. -> Результат

В C# Ф. часто называют "метод".
*/

// int Square(int value) // Square - имя Ф. (в основном название является глаголом или начинается с него), int value - параметры
// {
//     int result = value * value; // текст внутри {} - тело функции
//     return result; // возврат значения
// }


// void ShowSquare(int value) // когда Ф. ничего не возвращает, ей назначается тип данных void (пустота)
// {
//     int result = value * value;
//     Console.Write(result);
// }

/*
Виды Ф.

1. Без параметров, без возвращаемого значения
*/

// void ShowHelloMessage()
// {
//     Console.WriteLine("Hello World"); // побочный эффект Ф., т.к. он влияет на окружение (программу, консоль)
// }

/*
2. Без параметров, с возвращаемым значением
*/

// double GetPi()
// {
//     return 3.14159;
// }

/*
3. С параметрами, без возвращаемого значения
*/

// void ShowMessage(string message)
// {
//     Console.WriteLine(message);
// }

/*
4. С параметрами, с возвращаемым значением
*/

// int AddValues(int a, int b)
// {
//     int result = a + b;
//     return result;
// }



/*
Задача №1

Вычислить значение формулы (a*b)/(c+d), где a,b,c,d - некоторые целые числа. Решение оформить в виде Ф.
*/

// double CalculateFormula(int a, int b, int c, int d)
// {
//     double numenator = a * b; // хотя бы одна из переменных должна быть double, чтобы result тоже был double
//     int denomenator = c + d;
//     double result = numenator / denomenator;
//     return result;
// }

// CalculateFormula(1, 2, 3, 4); // вызов Ф. При определении Ф. a,b,c,d, - параметры Ф.. При вызове - аргументы.

// double result = CalculateFormula(1, 2, 3, 4);
// Console.WriteLine(result);


/*
Задача №2

Вывод на экран квадратов чисел от 1 до N.
*/

// void PrintSquares(int limit)
// {
//     int i = 1;
//     while (i <= limit)
//     {
//         Console.Write($"{i * i} ");
//         i++;
//     }
// }

// PrintSquares(5);
// PrintSquares(10);
// PrintSquares(15);

/*
Преимущества использования Ф.:

- выделяют логические единицы в коде
- упрощают декомпозицию программы
- упрощают повторное использование кода
- позволяют сокращать код
- повышают читаемость кода


Грамотное оформление Ф.:

- понятное и точное именование
- правильно подобранные параметры
- правильно выбранный тип возвращаемого значения
- качественно написанное тело Ф.


Способы передачи параметров в функцию:

1. По значению
    - параметр Ф. получает не саму переменную, а её копию
    - этот способ передачи используется по умолчанию со значимыми типами данных (value types):
    int, long, float, double, char, bool ...
    - переменная, переданная в Ф. по значению, не может быть изменена

Пример 1:
void Foo(int a)
{
    Console.Write(a);
}
int value = 5;
Foo(value);

Пример 2:
void Bar(int a)
{
    a = 0;
}
int value = 5;
Bar(value);
Console.Write(value); // на консоль всё равно выведется 5, а не 0 (п. 1.3 выше)


2. По ссылке
    - параметр Ф. получает адрес переданного объекта
    - этот способ применяется автоматически при передаче в Ф. ссылочного типа данных
    - переменная ссылочного типа хранит не само значение, а его адрес в памяти
    - массив - ссылочный тип данных. Его имя является ссылкой на область памяти. Массив, переданный
    таким образом в Ф. может быть изменён

Пример:
*/

// void ZeroEvenElements(int[] arr)
// {
//     for (int i = 0; i < arr.Length; i++)
//     {
//         if (arr[i] % 2 == 0)
//         {
//             arr[i] = 0;
//         }
//     }
// }

// void PrintArray(int[] arr)
// {
//     foreach (int e in arr)
//     {
//         Console.Write($"{e} ");
//     }
// }

// int[] array = { 1, 2, 3, 4, 5 };
// ZeroEvenElements(array);
// PrintArray(array);

/*
Способы инициализации переменных и массивов.


1. Конкретными значениями в коде:

int a = 1;
int arr[] = { 1, 2, 3 };


2. Генерация случайных чисел:

Random rnd = new Random();
где Random - тип данных "Генератор случайных чисел"
    rnd - имя переменной
    new Random() - создание объекта
int value = rnd.Next(1, 10);
где Next - вызов метода генерации случайного числа с 2 параметрами (начало и конец промежутка чисел,
    при чём верхняя граница 10 в данном примере не включена в промежуток)

Random rnd = new Random();
int size = 1000;
int[] arr_int = new int[size];
int i = 0;
while (i < size)
{
    arr_int[i] = rnd.Next(1, 10);
    i++;
}


3. Инициализация с помощью ввода с консоли:

string name = Console.ReadLine();
где string name - переменная для хранения введённой строки
    Console - модуль для работы с консолью
    ReadLine - метод считывания СТРОКИ с консоли

если необходимо ввести НЕ строку, нужно конвертировать переменную в другой тип данных:
int value = Convert.ToInt32(input);
где Convert - модуль для конвертации типов данных
    ToInt32 - вызов метода преобразования строки в число (string -> int)
*/
